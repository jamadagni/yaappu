# -*- coding: utf-8 -*-

# காப்புரிமை 2018, ஶ்ரீரமண ஶர்மா
# Copyright 2018, Shriramana Sharma
#
# Use and redistribution with or without modification is permitted without
# restrictions. THERE IS NO WARRANTY WHATSOEVER.


def _சார்பிடம்_நகலிடுக(ச1, ச2):
    '''சறுக்குவான்கள் இரண்டன் சார்பிடத்தை அறிந்து வேறுபாடு இருப்பின் ச1-லிருந்து ச2-க்கு நகலிடத் தகுந்த செயலை உருவாக்குகிறது'''
    def செயல்():
        ச1_எல்லை = ச1.maximum()
        ச2_எல்லை = ச2.maximum()
        if ச1_எல்லை == 0 or ச2_எல்லை == 0:  # செயலற்ற சறுக்குவான்
            return
        # ச1_சார்பிடம் = ச1_உண்மையிடம் ÷ ச1_எல்லை
        # (ச2_எல்லை × ச1_எல்லை) என்ற புதிய எல்லை கொண்டு சார்பிடத்தை ஒரு முழு எண்ணாக்குவோம்
        # ⇒ ச1_சார்பிடம் = ச1_உண்மையிடம் ÷ ச1_எல்லை × (ச2_எல்லை × ச1_எல்லை) ⇒
        ச1_சார்பிடம் = ச1.sliderPosition() * ச2_எல்லை
        ச2_சார்பிடம் = ச2.sliderPosition() * ச1_எல்லை  # மேற்கண்டவாறே
        if ச2_சார்பிடம் != ச1_சார்பிடம்:
            ச2_புதிய_இடம் = ச1_சார்பிடம் / ச1_எல்லை  # == ச2_எல்லை × ச1_உண்மையிடம் ÷ ச1_எல்லை
            ச2.setSliderPosition(round(ச2_புதிய_இடம்))
    return செயல்


def சறுக்குவான்கள்_சார்பிடம்_ஒருங்கிணைக்க(*சறுக்குவான்கள்):
    # கவனிக்க: விசைப்பலகை உள்ளீட்டால் இந்த ஒருங்கிணைப்பு செயல்படாமல் இருக்கலாம். காரணம் எனக்குத் தெரியவில்லை.
    சறுக்குவான்கள்_எண்ணிக்கை = len(சறுக்குவான்கள்)
    if சறுக்குவான்கள்_எண்ணிக்கை < 2:
        return
    for எண் in range(சறுக்குவான்கள்_எண்ணிக்கை - 1):
        அ = சறுக்குவான்கள்[எண்]
        ஆ = சறுக்குவான்கள்[எண் + 1]
        அ.actionTriggered.connect(_சார்பிடம்_நகலிடுக(அ, ஆ))
    ஆ.actionTriggered.connect(_சார்பிடம்_நகலிடுக(ஆ, சறுக்குவான்கள்[0]))
